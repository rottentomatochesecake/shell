import random

def miller_rabin(n, k=5):  # k = number of rounds
    if n == 2 or n == 3:
        return True
    if n <= 1 or n % 2 == 0:
        return False

    # Step 1: write n-1 as 2^s * d
    s, d = 0, n - 1
    while d % 2 == 0:
        s += 1
        d //= 2

    # Step 2: perform k tests
    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, d, n)  # a^d % n
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False  # Composite
    return True  # Probably prime


# ---- SAMPLE TEST CASES ----
numbers = [21, 97, 561, 7919]

for num in numbers:
    result = miller_rabin(num)
    print(f"{num} -> {'Probably Prime' if result else 'Composite'}")




def lcg(seed, a=1664525, c=1013904223, m=2**32, n=10):
    random_numbers = []
    x = seed
    for _ in range(n):
        x = (a * x + c) % m
        random_numbers.append(x)
    return random_numbers

# Generate 10 pseudo-random numbers with seed 42
seed = 42
numbers = lcg(seed)
print("LCG Pseudo-Random Numbers:")
for num in numbers:
    print(num)






import random

print("Random Integer (1 to 100):", random.randint(1, 100))
print("Random Float (0.0 to 1.0):", random.random())
print("Random Choice from List:", random.choice(['apple', 'banana', 'cherry']))
